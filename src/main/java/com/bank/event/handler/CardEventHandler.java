package com.bank.event.handler;

import com.bank.entity.Card;
import com.bank.event.CardBlockRequestedEvent;
import com.bank.repository.CardRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.springframework.transaction.event.TransactionPhase;
import org.springframework.transaction.event.TransactionalEventListener;

@Slf4j
@Component
@RequiredArgsConstructor
public class CardEventHandler {

    private final CardRepository cardRepository;

    @Async
    @EventListener
    public void handleCardBlockRequest(CardBlockRequestedEvent event) {
        Card card = event.getCard();
        String reason = event.getReason();

        log.info("üîÑ Processing card block request: Card {} for user {}, Reason: {}",
                card.getId(), card.getUser().getUsername(), reason);

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å:
        // - Email —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        // - –°–∏—Å—Ç–µ–º–æ–π —Ç–∏–∫–µ—Ç–æ–≤
        // - Slack/Teams —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

        log.info("‚úÖ Card block request processed for card: {}", card.getId());
    }

    @Async
    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    public void handleCardBlockRequestTransactional(CardBlockRequestedEvent event) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        log.info("üìß Sending notifications for card block request: {}", event.getCard().getId());
    }
}
