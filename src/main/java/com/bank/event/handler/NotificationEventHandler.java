package com.bank.event.handler;

import com.bank.event.CardBlockRequestedEvent;
import com.bank.event.TransferCompletedEvent;
import com.bank.event.UserActivityEvent;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@RequiredArgsConstructor
public class NotificationEventHandler {

    @Async
    @EventListener
    public void handleCardBlockRequest(CardBlockRequestedEvent event) {
        log.info("üîî Card block requested notification: Card {}, Reason: {}",
                event.getCard().getId(), event.getReason());

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å:
        // - Email —Å–µ—Ä–≤–∏—Å–æ–º
        // - SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        // - Slack/Teams webhooks
        // - –°–∏—Å—Ç–µ–º–æ–π —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    }

    @Async
    @EventListener
    public void handleTransferCompleted(TransferCompletedEvent event) {
        log.info("üîî Transfer completed: {} from card {} to card {}",
                event.getAmount(), event.getFromCard().getId(), event.getToCard().getId());

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ successful transfer
    }

    @Async
    @EventListener
    public void handleUserActivity(UserActivityEvent event) {
        log.info("üîî User activity: {} - {} from IP: {}",
                event.getUser().getUsername(), event.getActivityType(), event.getIpAddress());

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if ("FAILED_LOGIN".equals(event.getActivityType())) {
            log.warn("‚ö†Ô∏è Failed login attempt for user: {} from IP: {}",
                    event.getUser().getUsername(), event.getIpAddress());
        }
    }
}
