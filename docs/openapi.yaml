openapi: 3.0.3
info:
  title: Bank REST API
  description: Bank Card Management System API with JWT authentication
  version: 1.0.0
  contact:
    name: Bank Support
    email: support@bank.com

servers:
  - url: http://localhost:8080
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin123"

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
          example: "Bearer"

    CardResponse:
      type: object
      properties:
        id:
          type: integer
        cardNumber:
          type: string
          example: "**** **** **** 1234"
        cardHolder:
          type: string
          example: "JOHN DOE"
        expiryDate:
          type: string
          format: date
        balance:
          type: number
          format: double
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
        userUsername:
          type: string
          example: "user1"

    CreateCardRequest:
      type: object
      required:
        - cardNumber
        - cardHolder
        - expiryDate
        - initialBalance
        - userId
      properties:
        cardNumber:
          type: string
          example: "1234567890123456"
        cardHolder:
          type: string
          example: "JOHN DOE"
        expiryDate:
          type: string
          format: date
        initialBalance:
          type: number
          format: double
          example: 1000.0
        userId:
          type: integer
          example: 1

    TransferRequest:
      type: object
      required:
        - fromCardId
        - toCardId
        - amount
      properties:
        fromCardId:
          type: integer
          example: 1
        toCardId:
          type: integer
          example: 2
        amount:
          type: number
          format: double
          example: 100.0

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string

paths:
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
        '400':
          description: Validation error

  /api/auth/validate:
    post:
      tags:
        - Authentication
      summary: Validate JWT token
      description: Check if the provided JWT token is valid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
        '400':
          description: Invalid token

  /api/cards:
    get:
      tags:
        - Cards
      summary: Get user cards
      description: Retrieve paginated list of user's cards with optional search
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardResponse'
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '401':
          description: Unauthorized

  /api/cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Get card by ID
      description: Retrieve specific card details
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Card not found
        '403':
          description: Access denied

  /api/cards/transfer:
    post:
      tags:
        - Cards
      summary: Transfer between cards
      description: Transfer money between user's own cards
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Transfer completed successfully
        '400':
          description: Validation error or insufficient balance
        '403':
          description: Access denied

  /api/cards/{cardId}/block-request:
    post:
      tags:
        - Cards
      summary: Request card block
      description: User requests to block their card
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Block request submitted
        '404':
          description: Card not found
        '403':
          description: Access denied

  /api/admin/cards:
    get:
      tags:
        - Admin
      summary: Get all cards
      description: Retrieve paginated list of all cards (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardResponse'
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '403':
          description: Admin access required

    post:
      tags:
        - Admin
      summary: Create new card
      description: Create a new bank card (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '201':
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          description: Validation error
        '403':
          description: Admin access required

  /api/admin/cards/{cardId}:
    delete:
      tags:
        - Admin
      summary: Delete card
      description: Delete a card (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Card deleted successfully
        '404':
          description: Card not found
        '403':
          description: Admin access required

  /api/admin/cards/{cardId}/status:
    put:
      tags:
        - Admin
      summary: Update card status
      description: Update card status (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: [ACTIVE, BLOCKED]
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Card not found
        '403':
          description: Admin access required

security:
  - bearerAuth: []
